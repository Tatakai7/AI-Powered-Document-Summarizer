const PDFDocument = require("pdfkit")
const fs = require("fs")
const path = require("path")

// Generate PDF from summary data
const generatePDF = async (summaryData, documentData) => {
  return new Promise((resolve, reject) => {
    try {
      // Create a new PDF document
      const doc = new PDFDocument({
        size: "A4",
        margins: {
          top: 50,
          bottom: 50,
          left: 50,
          right: 50,
        },
      })

      // Create a buffer to store the PDF
      const chunks = []
      doc.on("data", (chunk) => chunks.push(chunk))
      doc.on("end", () => resolve(Buffer.concat(chunks)))
      doc.on("error", reject)

      // Add header
      doc.fontSize(24).fillColor("#1e40af").text("AI Document Summary", { align: "center" }).moveDown(0.5)

      // Add document title
      doc.fontSize(18).fillColor("#374151").text(documentData.title, { align: "center" }).moveDown(1)

      // Add metadata section
      doc.fontSize(10).fillColor("#6b7280")

      const metadata = [
        `Generated: ${new Date().toLocaleDateString("en-US", {
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        })}`,
        `Original Word Count: ${documentData.word_count} words`,
        `Compression Ratio: ${(summaryData.compression_ratio * 100).toFixed(1)}%`,
        `Sentiment: ${summaryData.sentiment_label.charAt(0).toUpperCase() + summaryData.sentiment_label.slice(1)} (${summaryData.sentiment_score.toFixed(2)})`,
      ]

      metadata.forEach((line) => {
        doc.text(line, { align: "center" })
      })

      doc.moveDown(1.5)

      // Add horizontal line
      doc.strokeColor("#e5e7eb").lineWidth(1).moveTo(50, doc.y).lineTo(545, doc.y).stroke().moveDown(1)

      // Add summary section
      doc.fontSize(16).fillColor("#1f2937").text("Summary", { underline: true }).moveDown(0.5)

      doc
        .fontSize(11)
        .fillColor("#374151")
        .text(summaryData.summary_text, {
          align: "justify",
          lineGap: 4,
        })
        .moveDown(1.5)

      // Add key points section
      if (summaryData.key_points && summaryData.key_points.length > 0) {
        doc.fontSize(16).fillColor("#1f2937").text("Key Points", { underline: true }).moveDown(0.5)

        summaryData.key_points.forEach((point, index) => {
          doc
            .fontSize(11)
            .fillColor("#374151")
            .text(`${index + 1}. ${point}`, {
              indent: 20,
              lineGap: 4,
            })
            .moveDown(0.5)
        })

        doc.moveDown(1)
      }

      // Add tone analysis section
      if (summaryData.tone_analysis && summaryData.tone_analysis.emotions) {
        doc.fontSize(16).fillColor("#1f2937").text("Tone Analysis", { underline: true }).moveDown(0.5)

        const emotions = summaryData.tone_analysis.emotions
        const emotionEntries = Object.entries(emotions)
          .filter(([_, score]) => score > 0)
          .sort(([_, a], [__, b]) => b - a)

        if (emotionEntries.length > 0) {
          emotionEntries.forEach(([emotion, score]) => {
            const emotionName = emotion.charAt(0).toUpperCase() + emotion.slice(1)
            doc
              .fontSize(11)
              .fillColor("#374151")
              .text(`${emotionName}: ${score} occurrences`, {
                indent: 20,
              })
              .moveDown(0.3)
          })

          doc
            .moveDown(0.5)
            .fontSize(10)
            .fillColor("#6b7280")
            .text(`Confidence: ${(summaryData.tone_analysis.confidence * 100).toFixed(1)}%`, {
              indent: 20,
            })
        } else {
          doc.fontSize(11).fillColor("#6b7280").text("No significant emotional tone detected", {
            indent: 20,
          })
        }

        doc.moveDown(1.5)
      }

      // Add footer
      const footerY = doc.page.height - 70
      doc
        .fontSize(9)
        .fillColor("#9ca3af")
        .text("Generated by AI Document Summarizer", 50, footerY, {
          align: "center",
        })
        .text("Powered by TensorFlow.js and Natural Language Processing", {
          align: "center",
        })

      // Finalize the PDF
      doc.end()
    } catch (error) {
      reject(error)
    }
  })
}

module.exports = {
  generatePDF,
}
